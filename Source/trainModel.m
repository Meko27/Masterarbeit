function [LArray,xTrainDe] = trainModel(xTrain,k,iter,metric) 
% trainModel - Trains Diffusion Model
% The noisy training data is denoised by solving a backward diffusion 
% process with the help of graph Laplacian of a random neighborhood graph 
% generated by the samples. The Laplacian Matrices are saved for each iteration.
% 
% Syntax: [LArray, xTrainDe]
%          = trainModel(xTrain,k,iter,metric)
%
% Inputs:
%  xTrain     - Data samples of size (n x d) (n samples of dimension d)
%  k          - The number of nearest neighbors considered in building the 
%               dist. matrix. (Default: 10)
%  iter       - Number of iterations (default: 15)
%  metric     - String which specifies underlying metric for calculating 
%               the distances (Default: euclidean)              
%
% Outputs:
%  LArray     -   Laplacian Matrices of each iteration 
%  xTrainDe   -   Denoised data (Dimension: n x d)
%


if nargin < 2 
    k = 10; 
end 
if nargin < 3
    iter = 15;
end
if nargin < 4
    metric = 'euclidean';
end 

n = size(xTrain,1); 

%% Iterative backward Diffusion process
LArray = cell(1,iter);
for i=1:iter
    localDist = localDistMtrx(xTrain,k,metric);
    LArray{i} = weightedGraphLaplacian(localDist);
    D = spdiags(diag(LArray{i}),0,n,n);
    xTrain=(D+0.25*LArray{i})\(D*xTrain); % Solve inverse Pseudo Markov
    xTrainDe{i} = xTrain;
end

%xTrainDe = xTrain;
end 